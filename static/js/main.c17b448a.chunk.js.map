{"version":3,"sources":["audio/audio.mp3","components/Upload.js","components/Bands.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Upload","props","onChangeHandler","event","setState","selectedFile","target","files","loaded","onClickHandler","data","FormData","append","state","axios","post","then","res","console","log","statusText","className","method","action","id","type","multiple","name","onChange","this","onClick","Component","useStyles","makeStyles","theme","flexContainer","display","flexWrap","justifyContent","paddingTop","Bands","classes","amplitudeValues","useRef","adjustStyle","newData","current","domElements","frequencyBandArray","map","num","document","getElementById","forEach","style","backgroundColor","height","runSpectrum","getData","requestAnimationFrame","Tooltip","title","aria-label","placement","IconButton","initialize","disabled","audioData","Paper","elevation","key","Container","audioFile","Audio","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","src","audio","fftSize","connect","destination","play","changeStyle","bufferLength","frequencyBinCount","amplitudeArray","Uint8Array","getByteFrequencyData","Array","keys","React","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c17b448a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.99c68786.mp3\";","import React, { Component } from 'react';\r\nimport '../css/Upload.css';\r\nimport axios from 'axios';\r\nclass Upload extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedFile : null\r\n        }\r\n    }\r\n\r\n    onChangeHandler = event => {\r\n        this.setState({\r\n            selectedFile: event.target.files[0],\r\n            loaded:0\r\n        });\r\n    }\r\n\r\n    onClickHandler = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.selectedFile);\r\n        axios.post(\"http://localhost:8000/upload\", data)\r\n       .then(res => {\r\n           console.log(res.statusText)\r\n       });\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className = \"col-md-8\"> \r\n                        <form method=\"post\" action=\"#\" id = \"#\">\r\n                            <div className=\"form-group\">\r\n                                <input type = \"file\" className= \"form-control\" multiple=\"\" name=\"file\" onChange={this.onChangeHandler}/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onClickHandler}>Upload</button>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Upload;","import React, { useRef } from 'react';\r\nimport Upload from './Upload';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport '../css/Bands.css';\r\nconst useStyles = makeStyles(theme => ({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        paddingTop: '25%'\r\n    }\r\n}));\r\n\r\n\r\nfunction Bands(props){\r\n    const classes = useStyles();\r\n    const amplitudeValues = useRef(null);\r\n    function adjustStyle(newData){\r\n        amplitudeValues.current = newData;\r\n        let domElements = props.frequencyBandArray.map((num) => document.getElementById(num));\r\n      props.frequencyBandArray.forEach((num) => {\r\n        domElements[num].style.backgroundColor = `rgb(255, ${amplitudeValues.current[num]}, 255)`\r\n        domElements[num].style.height = `${amplitudeValues.current[num]/1.2}px`\r\n      });\r\n    };\r\n\r\n    function runSpectrum(){\r\n        props.getData(adjustStyle);\r\n        requestAnimationFrame(runSpectrum);\r\n    };\r\n    \r\n    function handleStartButton(){\r\n        props.initialize();\r\n        requestAnimationFrame(runSpectrum);\r\n    };\r\n\r\n\r\n    return(\r\n    <div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8\">\r\n              <Upload />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <Tooltip title = \"Start\" aria-label = \"Start\" placement = \"right\">\r\n                  <IconButton id = \"startButton\" onClick = {() => handleStartButton()} disabled = {!!props.audioData ? true : false}>\r\n                      <PlayCircleOutlineIcon  />\r\n                  </IconButton>\r\n              </Tooltip>\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n        <div className={classes.flexContainer}>\r\n          {props.frequencyBandArray.map((num) =>\r\n            <Paper\r\n              className={'frequencyBands'}\r\n              elevation={4}\r\n              id={num}\r\n              key={num}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n};\r\nexport default Bands;","import React from'react';\r\nimport Bands from './Bands';\r\nimport audio from '../audio/audio.mp3';\r\nimport '../css/Container.css';\r\nconst numberOfBands = 25;\r\nclass Container extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n        this.frequencyBandArray = [...Array(numberOfBands).keys()];\r\n    }\r\n\r\n    initialize = () => {\r\n        const audioFile = new Audio();\r\n        const audioContext = new AudioContext();\r\n        const source = audioContext.createMediaElementSource(audioFile);\r\n        const analyser = audioContext.createAnalyser();\r\n        audioFile.src = audio;\r\n        analyser.fftSize = 64;\r\n        source.connect(audioContext.destination);\r\n        source.connect(analyser);\r\n        audioFile.play();\r\n        this.setState({\r\n            audioData: analyser\r\n        });\r\n    }\r\n\r\n    getData = (changeStyle) => {\r\n        const bufferLength = this.state.audioData.frequencyBinCount;\r\n        const amplitudeArray = new Uint8Array(bufferLength);\r\n        this.state.audioData.getByteFrequencyData(amplitudeArray);\r\n        changeStyle(amplitudeArray);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Bands \r\n                initialize = {this.initialize}\r\n                frequencyBandArray = {this.frequencyBandArray}\r\n                getData = {this.getData}\r\n                audioData = {this.state.audioData}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Container;\r\n\r\n\r\n","import React from 'react';\r\nimport Container from './components/Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Container />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}