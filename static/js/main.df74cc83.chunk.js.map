{"version":3,"sources":["audio/audio.mp3","components/Bands.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","flexContainer","display","flexWrap","justifyContent","paddingTop","Bands","props","classes","amplitudeValues","useRef","adjustStyle","newData","current","domElements","frequencyBandArray","map","num","document","getElementById","forEach","style","backgroundColor","height","runSpectrum","getData","requestAnimationFrame","Tooltip","title","aria-label","placement","IconButton","id","onClick","initialize","disabled","audioData","className","Paper","elevation","key","Container","audioFile","Audio","audioContext","AudioContext","source","createMediaElementSource","analyser","createAnalyser","src","audio","fftSize","connect","destination","play","setState","changeStyle","bufferLength","state","frequencyBinCount","amplitudeArray","Uint8Array","getByteFrequencyData","Array","keys","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,mC,uRCOrCC,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,cAAe,CACXC,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,WAAY,YAmDLC,MA9Cf,SAAeC,GACX,IAAMC,EAAUV,IACVW,EAAkBC,iBAAO,MAC/B,SAASC,EAAYC,GACjBH,EAAgBI,QAAUD,EAC1B,IAAIE,EAAcP,EAAMQ,mBAAmBC,KAAI,SAACC,GAAD,OAASC,SAASC,eAAeF,MAClFV,EAAMQ,mBAAmBK,SAAQ,SAACH,GAChCH,EAAYG,GAAKI,MAAMC,gBAAvB,iBAAmDb,EAAgBI,QAAQI,GAA3E,UACAH,EAAYG,GAAKI,MAAME,OAAvB,UAAmCd,EAAgBI,QAAQI,GAA3D,SAIJ,SAASO,IACLjB,EAAMkB,QAAQd,GACde,sBAAsBF,GAS1B,OACA,6BACI,6BACA,kBAACG,EAAA,EAAD,CAASC,MAAQ,QAAQC,aAAa,QAAQC,UAAY,SACtD,kBAACC,EAAA,EAAD,CAAYC,GAAK,cAAcC,QAAW,kBAT9C1B,EAAM2B,kBACNR,sBAAsBF,IAQmDW,WAAc5B,EAAM6B,WACrF,kBAAC,IAAD,SAIR,yBAAKC,UAAW7B,EAAQP,eACrBM,EAAMQ,mBAAmBC,KAAI,SAACC,GAAD,OAC5B,kBAACqB,EAAA,EAAD,CACED,UAAW,iBACXE,UAAW,EACXP,GAAIf,EACJuB,IAAKvB,U,iBCRJwB,G,kBAzCX,WAAYlC,GAAO,IAAD,8BACd,4CAAMA,KAKV2B,WAAa,WACT,IAAMQ,EAAY,IAAIC,MAChBC,EAAe,IAAIC,aACnBC,EAASF,EAAaG,yBAAyBL,GAC/CM,EAAWJ,EAAaK,iBAC9BP,EAAUQ,IAAMC,IAChBH,EAASI,QAAU,GACnBN,EAAOO,QAAQT,EAAaU,aAC5BR,EAAOO,QAAQL,GACfN,EAAUa,OACV,EAAKC,SAAS,CACVpB,UAAWY,KAjBD,EAqBlBvB,QAAU,SAACgC,GACP,IAAMC,EAAe,EAAKC,MAAMvB,UAAUwB,kBACpCC,EAAiB,IAAIC,WAAWJ,GACtC,EAAKC,MAAMvB,UAAU2B,qBAAqBF,GAC1CJ,EAAYI,IAvBZ,EAAKF,MAAQ,GACb,EAAK5C,mBAAL,YAA8BiD,MALhB,IAKqCC,QAHrC,E,sEA6Bd,OACI,6BACI,kBAAC,EAAD,CACA/B,WAAcgC,KAAKhC,WACnBnB,mBAAsBmD,KAAKnD,mBAC3BU,QAAWyC,KAAKzC,QAChBW,UAAa8B,KAAKP,MAAMvB,iB,GApChB+B,IAAMC,YCMfC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1D,SAASC,eAAe,SD6H3C,kBAAmB0D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df74cc83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.508ad8e4.mp3\";","import React, { useRef } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport '../css/Bands.css';\r\nconst useStyles = makeStyles(theme => ({\r\n    flexContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n        paddingTop: '25%'\r\n    }\r\n}));\r\n\r\n\r\nfunction Bands(props){\r\n    const classes = useStyles();\r\n    const amplitudeValues = useRef(null);\r\n    function adjustStyle(newData){\r\n        amplitudeValues.current = newData;\r\n        let domElements = props.frequencyBandArray.map((num) => document.getElementById(num));\r\n      props.frequencyBandArray.forEach((num) => {\r\n        domElements[num].style.backgroundColor = `rgb(0, ${amplitudeValues.current[num]}, 255)`\r\n        domElements[num].style.height = `${amplitudeValues.current[num]}px`\r\n      });\r\n    };\r\n\r\n    function runSpectrum(){\r\n        props.getData(adjustStyle);\r\n        requestAnimationFrame(runSpectrum);\r\n    };\r\n    \r\n    function handleStartButton(){\r\n        props.initialize();\r\n        requestAnimationFrame(runSpectrum);\r\n    };\r\n\r\n\r\n    return(\r\n    <div>\r\n        <div>\r\n        <Tooltip title = \"Start\" aria-label = \"Start\" placement = \"right\">\r\n            <IconButton id = \"startButton\" onClick = {() => handleStartButton()} disabled = {!!props.audioData ? true : false}>\r\n                <PlayCircleOutlineIcon  />\r\n            </IconButton>\r\n        </Tooltip>\r\n        </div>\r\n        <div className={classes.flexContainer}>\r\n          {props.frequencyBandArray.map((num) =>\r\n            <Paper\r\n              className={'frequencyBands'}\r\n              elevation={4}\r\n              id={num}\r\n              key={num}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n};\r\nexport default Bands;","import React from'react';\r\nimport Bands from './Bands';\r\nimport audio from '../audio/audio.mp3';\r\nimport '../css/Container.css';\r\nconst numberOfBands = 25;\r\nclass Container extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n        this.frequencyBandArray = [...Array(numberOfBands).keys()];\r\n    }\r\n\r\n    initialize = () => {\r\n        const audioFile = new Audio();\r\n        const audioContext = new AudioContext();\r\n        const source = audioContext.createMediaElementSource(audioFile);\r\n        const analyser = audioContext.createAnalyser();\r\n        audioFile.src = audio;\r\n        analyser.fftSize = 64;\r\n        source.connect(audioContext.destination);\r\n        source.connect(analyser);\r\n        audioFile.play();\r\n        this.setState({\r\n            audioData: analyser\r\n        });\r\n    }\r\n\r\n    getData = (changeStyle) => {\r\n        const bufferLength = this.state.audioData.frequencyBinCount;\r\n        const amplitudeArray = new Uint8Array(bufferLength);\r\n        this.state.audioData.getByteFrequencyData(amplitudeArray);\r\n        changeStyle(amplitudeArray);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Bands \r\n                initialize = {this.initialize}\r\n                frequencyBandArray = {this.frequencyBandArray}\r\n                getData = {this.getData}\r\n                audioData = {this.state.audioData}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Container;\r\n\r\n\r\n","import React from 'react';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <div>\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}